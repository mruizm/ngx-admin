service: am-db-registry-add
stage: dev

provider:
  name: aws
  runtime: provided
  region: us-west-1
  memorySize: 128
  iamRoleStatements:
    - Effect: Allow
      Action:
        - cloudwatch:*
        - logs:*
        - cloudformation:*
      Resource: "*"

resources:
  Resources:
    IamRoleLambdaExecution:
      Type: AWS::IAM::Role
      Properties:
        RoleName: am-db-registry-add
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - lambda.amazonaws.com
                  - apigateway.amazonaws.com
              Action: sts:AssumeRole

# you can define service wide environment variables here
environment:
  LD_LIBRARY_PATH: ${process.env.LAMBDA_TASK_ROOT}/sharedlib
  PATH: ${process.env.PATH}:${process.env.LAMBDA_TASK_ROOT}/bin

# you can add packaging information here
package:
    exclude:
        - _**
        - _*
        - _*init.php*
        - composer*
    include:
        #- .edgerc
        - vendor/*
        - lib/*
        #- classes/*

functions:
  dbregistryadd:
    handler: handler.dbregistryadd
    layers:
      # Ref name is generated by TitleCasing the layer name & appending LambdaLayer
      # - {Ref: PhpLambdaLayer}
      - {Ref: PhpLambdaLayer}
      # - arn:aws:lambda:us-west-2:887080169480:layer:php73:3
    timeout: 30 # optional, in seconds, default is 6
    events:
      - http:
          path: api/registry/add
          method: post
          cors: true
    environment:
      DB_USER: ${file(./config.${self:provider.stage}.json):DB_USER}
      DB_PASSWORD: ${file(./config.${self:provider.stage}.json):DB_PASSWORD}
      DB_HOST: ${file(./config.${self:provider.stage}.json):DB_HOST}
      DB_NAME: ${file(./config.${self:provider.stage}.json):DB_NAME}

layers:
  php:
    path: layer/php
